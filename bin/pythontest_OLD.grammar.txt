/*
*
*	Napoleon Maraidonis 3130123
*	Euaggelos Bitsikas 	3130142
*	Emmanouil Vafeiadis 3120229
*	Omada Xrhstwn : Ergasthrio Trith 11-1
*/


Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';

	pp = '++' | '--';
	eqq = '==';	
	minuseq = '-=';
	pluseq = '+=';
	deq = '/=';
	in = 'in';
	range = 'range';
	neqq = '!=';


	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	eq = '=';
	exclam = '!';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma=',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	print = 'print';
	return = 'return';
	for = 'for';
	less = '<';	
	great = '>';
	true = 'true';
	semi = ':';
	false = 'false';
	quote = '"';
	blank = (' ' | lf | cr | eol);
	line_comment = '#' not_eol* eol; 
	number = digit+ | (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string ='''not_eol*''' | '"'not_eol* '"';



Ignored Tokens
	blank, line_comment;


Productions
		programme = {commands}commands* {-> New programme.commands([commands])};
		commands ={commands_function} statement {-> New commands.statement(statement)}
				| function {-> New commands.func(function)} ;


	function = {func} def identifier l_par argument? r_par semi statement{-> New function.func(expression.identifier, [argument], statement)};

	argument = {arg} identifier temp2? temp3* {-> New argument.arg(expression.identifier, [temp2], [temp3])};
	temp2 ={eq_value} eq value {-> New temp2(value)} ;
	temp3 ={comma_id_temp2} comma identifier temp2? {-> New temp3(identifier, [temp2])};

	
	statement={if}tab* if morecomparison semi statement {-> New statement.if(morecomparison, statement)}
				  |{assigneq}tab* identifier eq expression {-> New statement.assigneq(identifier, expression)}
 				  |{assignmpeq}tab* identifier minuspluseq expression{-> New statement.assigmpeq(identifier, expression)}
				  |{print}tab* print expression temp4* {-> New statement.print(expression, [temp4])}
				  |{while}tab* while morecomparison semi statement {-> New statement.while(morecomparison, statement)}
				  |{for_statement}tab* for [firstid]:identifier in [secondid]:identifier semi statement {-> New statement.for_statement(firstid, secondid, statement)}
				  |{return}tab* return expression{-> New statement.return(expression)}
				  |{funcall_statement}tab* callfuncall{-> New statement.funcallstatement(callfuncall)}
				  |{list}tab* identifier l_br [leftexpr]:expression r_br eq [rightexpr]:expression{-> New statement.list(identifier, leftexpr, rightexpr)};

	funcall{-> statement} = {funcall} identifier l_par  funcallt r_par {-> New statement.funcall(identifier, funcallt)};
	funcallt ={funcall_t}arglist?{-> arglist};
	
	callfuncall {-> statement}= {callfuncall}funcall{-> funcall.statement};
	
	post_prefix{-> expression} = 
				  {xpp} identifier pp{-> New post_prefix.expression(identifier)}
				  |{ppx} pp identifier{-> New post_prefix.expression(identifier)}
				  |{listpost_prefix}pp tab* identifier l_br [leftexpr]:expression r_br eq [rightexpr]:expression{-> New listpost_prefix.expression(identifier,leftexpr, rightexpr)};
				  
	
	minuspluseq {->}= {minuseq}minuseq{->}
				  |{pluseq}pluseq{->}
				  |{deq}deq{->};

	arglist = {arglist} expression temp4*{-> New arglist(expression, [temp4])};

	temp4 ={comma_expression} comma expression {-> New temp4(expression)};
	
	morecomparison = {true} true{-> New morecomparison.true(true)}
					 |{false} false{-> New morecomparison.false(false)}
					 |{eqqormeq}[comp1]:comparison morecomparison_oper [comp2]:comparison{-> New morecomparison.eqqormeq(comp1, comp2)}
					 |{comp}comparison {-> comparison.morecomparison};
					 
	comparison {-> morecomparison} = {comparison}[exp1]:expression comparison_oper [exp2]:expression {-> New comparison.comparison(exp1, exp2)}
						|{idcomp}multiplication {-> multiplication.expression};
	
	comparison_oper {->}= {eqq}eqq{->}
					 |{meq}neqq {->};
					 
	morecomparison_oper {-> } = {less}less {->}
						  |{great}great {->};				 
					 
	expression = 	{arithmetic}arithmetic {-> expression.arithmetic}
					|{list} l_br value temp5* r_br {-> New expression.list(value, [temp5])}
					|{pp_mm}post_prefix {-> expression.post_prefix}
					|{array}identifier l_br [leftexpr]:expression r_br {-> New expression.array(identifier.expression, expression)};
						
	temp5 ={comma_value} comma value {-> New temp5(value)};
					
	arithmetic {->expression} =	{multiplication} multiplication {->expression.multiplication}
				|{addition}multiplication plus expression {-> New expression.addtion(multiplication.expression, something.expression)}
				|{subtraction}multiplication minus expression {-> New expression.substraction(multiplication.expression, something.expression)};


	multiplication {->expression}  = {something} something {->something.expression} 
					|{multiplication} multiplication mult something {-> New expression.multiplication(multiplication.expression, something.expression)}
					|{division} multiplication div something {-> New expression.division(multiplication.expression, something.expression)};
						  
	something {->expression} =	{par} l_par expression r_par {-> expression}  
				|{identifier}identifier{-> identifier.expression}	
				|{val}value	{-> value.expression}		
				|{fncal}callfuncall {-> funcall};

	value {->expression} = {str}string {-> New expression.str(string)}	
			|{numb}number {-> New expression.numb(number)};

	identifier {->expression}  = {id}id {->New expression.identifier(id)};	

Abstract Syntax Tree
	programme = {commands}commands*;
	
	commands = {func} function
			   |{statement} statement;
			   
	function = {func}identifier argument? statement;

	argument = {arg}identifier temp2? temp3*;
	
	temp2 = {eq_value} value;
	
	temp3 = {comma_id_temp2} identifier temp2?;
	
	statement = {if}morecomparison statement
				|{assigneq} identifier expression
				|{assignmpeq} identifier expression
				|{print} expression temp4*
				|{while}morecomparison statement
				|{for_statement} [firstid]:identifier [secondid]:identifier statement
				|{return} expression
				|{funcall_statement} callfuncall
				|{list}identifier [leftexpr]:expression [rightexpr]:expression;
	
	funcall = {funcall} identifier funcallt;//TO STATEMENT
	
	funcallt = {funcallt} arglist?;
	
	callfuncall = {callfuncall} funcall;\TO STATEMENT
	
	post_prefix = {xpp} identifier //TO expression
				  |{ppx}identifier
				  |{listpost_prefix}identifier [leftexpr]:expression [rightexpr]:expression;
				
	arglist = {arglist} expression temp4*;
	
	temp4 = {comma_expression}expression;
	
	morecomparison = {true}true
					 |{false}false
					 |{eqqormeq}[comp1]:comparison [comp2]:comparison
					 |{comparison}comparison;
					 
	comparison = {comparison} [exp1]:expression [exp2]:expression; \\to morecomparison
	
	expression = {list}value temp5*
				 |{array} identifier [leftexpr]:expression;
				 
	temp5 = {comma_value}value;
	
	arithmetic = {addtion}multiplication expression \\to expression
				 |{substraction}multiplication expression;
				 
	multiplication = {multiplication} multiplication something \\TO expression
					 |{division}multiplication something;
				\\something TO expression	 
	value = {str}string \\to expression
			|{numb}number;
			
	identifier = {id}id;			