/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AWhileStatement extends PStatement
{
    private PMorecomparison _morecomparison_;
    private PStatement _statement_;

    public AWhileStatement()
    {
    }

    public AWhileStatement(
        PMorecomparison _morecomparison_,
        PStatement _statement_)
    {
        setMorecomparison(_morecomparison_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AWhileStatement(
            (PMorecomparison) cloneNode(_morecomparison_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStatement(this);
    }

    public PMorecomparison getMorecomparison()
    {
        return _morecomparison_;
    }

    public void setMorecomparison(PMorecomparison node)
    {
        if(_morecomparison_ != null)
        {
            _morecomparison_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _morecomparison_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_morecomparison_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_morecomparison_ == child)
        {
            _morecomparison_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_morecomparison_ == oldChild)
        {
            setMorecomparison((PMorecomparison) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
