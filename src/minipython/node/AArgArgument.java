/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArgArgument extends PArgument
{
    private PIdentifier _identifier_;
    private PTemp2 _temp2_;
    private final LinkedList _temp3_ = new TypedLinkedList(new Temp3_Cast());

    public AArgArgument()
    {
    }

    public AArgArgument(
        PIdentifier _identifier_,
        PTemp2 _temp2_,
        List _temp3_)
    {
        setIdentifier(_identifier_);

        setTemp2(_temp2_);

        {
            this._temp3_.clear();
            this._temp3_.addAll(_temp3_);
        }

    }
    public Object clone()
    {
        return new AArgArgument(
            (PIdentifier) cloneNode(_identifier_),
            (PTemp2) cloneNode(_temp2_),
            cloneList(_temp3_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgArgument(this);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PTemp2 getTemp2()
    {
        return _temp2_;
    }

    public void setTemp2(PTemp2 node)
    {
        if(_temp2_ != null)
        {
            _temp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _temp2_ = node;
    }

    public LinkedList getTemp3()
    {
        return _temp3_;
    }

    public void setTemp3(List list)
    {
        _temp3_.clear();
        _temp3_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_temp2_)
            + toString(_temp3_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_temp2_ == child)
        {
            _temp2_ = null;
            return;
        }

        if(_temp3_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_temp2_ == oldChild)
        {
            setTemp2((PTemp2) newChild);
            return;
        }

        for(ListIterator i = _temp3_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Temp3_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PTemp3 node = (PTemp3) o;

            if((node.parent() != null) &&
                (node.parent() != AArgArgument.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArgArgument.this))
            {
                node.parent(AArgArgument.this);
            }

            return node;
        }
    }
}
