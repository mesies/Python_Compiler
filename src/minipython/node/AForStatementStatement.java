/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatementStatement extends PStatement
{
    private PIdentifier _firstid_;
    private PIdentifier _secondid_;
    private PStatement _statement_;

    public AForStatementStatement()
    {
    }

    public AForStatementStatement(
        PIdentifier _firstid_,
        PIdentifier _secondid_,
        PStatement _statement_)
    {
        setFirstid(_firstid_);

        setSecondid(_secondid_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatementStatement(
            (PIdentifier) cloneNode(_firstid_),
            (PIdentifier) cloneNode(_secondid_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatementStatement(this);
    }

    public PIdentifier getFirstid()
    {
        return _firstid_;
    }

    public void setFirstid(PIdentifier node)
    {
        if(_firstid_ != null)
        {
            _firstid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _firstid_ = node;
    }

    public PIdentifier getSecondid()
    {
        return _secondid_;
    }

    public void setSecondid(PIdentifier node)
    {
        if(_secondid_ != null)
        {
            _secondid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _secondid_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_firstid_)
            + toString(_secondid_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_firstid_ == child)
        {
            _firstid_ = null;
            return;
        }

        if(_secondid_ == child)
        {
            _secondid_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_firstid_ == oldChild)
        {
            setFirstid((PIdentifier) newChild);
            return;
        }

        if(_secondid_ == oldChild)
        {
            setSecondid((PIdentifier) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
