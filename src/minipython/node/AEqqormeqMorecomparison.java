/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AEqqormeqMorecomparison extends PMorecomparison
{
    private PMorecomparison _comp1_;
    private PMorecomparison _comp2_;

    public AEqqormeqMorecomparison()
    {
    }

    public AEqqormeqMorecomparison(
        PMorecomparison _comp1_,
        PMorecomparison _comp2_)
    {
        setComp1(_comp1_);

        setComp2(_comp2_);

    }
    public Object clone()
    {
        return new AEqqormeqMorecomparison(
            (PMorecomparison) cloneNode(_comp1_),
            (PMorecomparison) cloneNode(_comp2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqqormeqMorecomparison(this);
    }

    public PMorecomparison getComp1()
    {
        return _comp1_;
    }

    public void setComp1(PMorecomparison node)
    {
        if(_comp1_ != null)
        {
            _comp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comp1_ = node;
    }

    public PMorecomparison getComp2()
    {
        return _comp2_;
    }

    public void setComp2(PMorecomparison node)
    {
        if(_comp2_ != null)
        {
            _comp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comp2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comp1_)
            + toString(_comp2_);
    }

    void removeChild(Node child)
    {
        if(_comp1_ == child)
        {
            _comp1_ = null;
            return;
        }

        if(_comp2_ == child)
        {
            _comp2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comp1_ == oldChild)
        {
            setComp1((PMorecomparison) newChild);
            return;
        }

        if(_comp2_ == oldChild)
        {
            setComp2((PMorecomparison) newChild);
            return;
        }

    }
}
