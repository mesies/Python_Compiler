/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseACommandsProgramme(ACommandsProgramme node);
    void caseAFunctionCommands(AFunctionCommands node);
    void caseAStatementCommands(AStatementCommands node);
    void caseAArgArgument(AArgArgument node);
    void caseAEqValueTemp2(AEqValueTemp2 node);
    void caseACommaIdTemp2Temp3(ACommaIdTemp2Temp3 node);
    void caseAIfStatement(AIfStatement node);
    void caseAAssigneqStatement(AAssigneqStatement node);
    void caseAAssigmpeqStatement(AAssigmpeqStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatementStatement(AForStatementStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAFuncallStatementStatement(AFuncallStatementStatement node);
    void caseAListStatement(AListStatement node);
    void caseAFuncallFuncall(AFuncallFuncall node);
    void caseACallfuncalltagCallfuncall(ACallfuncalltagCallfuncall node);
    void caseAArglistArglist(AArglistArglist node);
    void caseAFuncalltFuncallt(AFuncalltFuncallt node);
    void caseACommaExpressionTemp4(ACommaExpressionTemp4 node);
    void caseATrueMorecomparison(ATrueMorecomparison node);
    void caseAFalseMorecomparison(AFalseMorecomparison node);
    void caseAEqqormeqMorecomparison(AEqqormeqMorecomparison node);
    void caseAComparisonexMorecomparison(AComparisonexMorecomparison node);
    void caseAIdcompMorecomparison(AIdcompMorecomparison node);
    void caseAListExpression(AListExpression node);
    void caseAArrayExpression(AArrayExpression node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubstractionExpression(ASubstractionExpression node);
    void caseAMultiplicationExpression(AMultiplicationExpression node);
    void caseADivisionExpression(ADivisionExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAXppExpression(AXppExpression node);
    void caseAPpxExpression(APpxExpression node);
    void caseAListpostPrefixExpression(AListpostPrefixExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseACallfuncallExpression(ACallfuncallExpression node);
    void caseAFuncallExpExpression(AFuncallExpExpression node);
    void caseAStrValue(AStrValue node);
    void caseANumbValue(ANumbValue node);
    void caseACommaValueTemp5(ACommaValueTemp5 node);
    void caseAIdIdentifier(AIdIdentifier node);

    void caseTTab(TTab node);
    void caseTPlus(TPlus node);
    void caseTPp(TPp node);
    void caseTEqq(TEqq node);
    void caseTMinuseq(TMinuseq node);
    void caseTPluseq(TPluseq node);
    void caseTDeq(TDeq node);
    void caseTIn(TIn node);
    void caseTRange(TRange node);
    void caseTNeqq(TNeqq node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTDiv(TDiv node);
    void caseTEq(TEq node);
    void caseTExclam(TExclam node);
    void caseTDictt(TDictt node);
    void caseTDef(TDef node);
    void caseTLogicPlus(TLogicPlus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTQmark(TQmark node);
    void caseTGqmark(TGqmark node);
    void caseTIf(TIf node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTFor(TFor node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
